.photo-page{
    /* display: grid;
    grid-template-columns: 10fr 10fr; */
    display: grid;
    grid-template-columns:  10fr 5fr;
    justify-content: center;
}

.photo-container {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #292b2c;
    width: 100%;
    height: 100%;
    /* padding: 30px; */
    flex-grow: 10;
}

.photo-info{
    background-color: white;
    width: 100%;
    height: 500px;
   display: flex;
   justify-content: center;
   margin-top: 160px;
   flex-grow: 0;

}

.img {
    display: block;
    max-height: 100%;
    max-width: 100%;
    object-fit: cover;
    /* margin: 0px ; */
}

.title-container{
    padding-top: 20px;
}



.photo-info-card{
    width: 300px;

}

.comment-container{
    margin-top: 100px;
    border-top: .2px solid rgb(110, 109, 109);
}

@media screen and (max-width: 599px) {
    .photo-page{
        display: flex;
        flex-direction: column;
        background-color: #292b2c;
        height: 100vh;
    }
    .photo-container {
        height: 100%;
        width: 100%;
        margin-top: 50px;
    }
    .photo-info {
        width: 100%;
        background-color: white;
    }
  }

  @media screen and (min-width: 600px) {
    .photo-page{
        height: 100vh;

    }

    .img {
        height: 100%;
        width: 100%;
    }
  }



//photopage

import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useHistory, useParams , Redirect} from 'react-router-dom'
import { getSinglePhoto, deleteUserPhoto } from '../../store/photo';
import Comment from './comment';
import './PhotoPage.css'


const PhotoPage = () => {
    const dispatch = useDispatch();
    const history = useHistory()
    const {id} = useParams()
    const sessionUser = useSelector(state => state.session.user)
    const photo = useSelector(state =>  state.photos[id]);

    useEffect(() => {
        dispatch(getSinglePhoto(id))
    }, [dispatch])

    if(!sessionUser) {
        return (
            <Redirect to='/login' />
        )
    }

    if (!photo) {
        return null
    }

    const directToEditPage = () => {
        history.push(`/edit/${photo.id}`)
    }

    const handleDeletePhoto = async (e) => {
        e.preventDefault()
        dispatch(deleteUserPhoto(photo.id))
        history.push(`/users/${sessionUser.id}`)
    }

    if(photo.userId !== sessionUser.id)
    return (
        <div className='photo-page'>
            <div className='photo-container'>
                <img className='img' src={photo.imgURL}></img>
            </div>
            <div className='photo-info'>
                <div className='photo-info-card'>
                    <div className='photo-title-container'>
                        <h1>{photo?.title}</h1>
                    </div>
                    <div>
                        <h3>Photo by: {photo.User?.username}</h3>
                        <p>{photo?.caption}</p>
                    </div>
                </div>
                <div className='photo-comments'>
                    <Comment />
                </div>
            </div>

        </div>
    )
    else
    return (
        <div className='photo-page'>
            <div className='photo-container'>
                <img className='img' src={photo.imgURL}></img>
            </div>
            <div className='photo-info'>
                <div className='photo-info-card'>
                    <div className='photo-title-container'>
                        <h1>{photo?.title}</h1>
                        <h3>Photo by: {photo.User?.username}</h3>
                        <p>{photo?.caption}</p>
                    </div>
                    <div>
                        <button onClick={directToEditPage}>Edit Photo</button>
                        <button onClick={handleDeletePhoto}>Delete Photo</button>
                    </div>

                    <div>
                        <Comment />
                    </div>
                </div>
            </div>

        </div>
    )

}

export default PhotoPage


























import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useHistory, useParams , Redirect} from 'react-router-dom'
import { getSinglePhoto, deleteUserPhoto } from '../../store/photo';
import {Modal} from '../../context/Modal'
import {getComments, createComment, updateComment, removeComment} from '../../store/comment';

// import Comment from './comment';
import './PhotoPage.css'


const PhotoPage = () => {
    const dispatch = useDispatch();
    const history = useHistory()
    const {id} = useParams()
    const [comment, setComment] = useState('');
    const [commentToDeleteId, setCommentToDeleteId] = useState('');
    const [commentToUpdateId, setCommentUpdateId] = useState('');
    const [editedComment, setEditedComment] = useState('');
    const [showModal, setShowModal] = useState(false);
    const sessionUser = useSelector(state => state.session.user)
    const photo = useSelector(state =>  state.photos[id]);

    const comments = useSelector(state=>{
        return Object.values(state.comments)
    })

    const usersComments = comments.filter(comment => comment.photoId === Number(id))

    useEffect(() => {
        dispatch(getSinglePhoto(id))
        dispatch(getComments(id))
    }, [dispatch, id])

    if(!sessionUser) {
        return (
            <Redirect to='/login' />
        )
    }

    if (!photo) {
        return null
    }
    if(!comments) return null;


    const directToEditPage = () => {
        history.push(`/edit/${photo.id}`)
    }

    const handleDeletePhoto = async (e) => {
        e.preventDefault()
        dispatch(deleteUserPhoto(photo.id))
        history.push(`/users/${sessionUser.id}`)
    }

    const handleSubmit = async (e) => {
        e.preventDefault();

        const commentData = {
            comment: comment,
            userId: sessionUser.id,
            photoId: id
        }

        await dispatch(createComment(commentData))
        setComment('')
    }

    const handleDeleteComment = async (e) => {
        e.preventDefault();
        await dispatch(removeComment(commentToDeleteId))
    }

    const handleEditComment = async(e) => {
        e.preventDefault();
        const data = {id: commentToUpdateId, content: editedComment}
        await dispatch(updateComment(data))

        setShowModal(false)
    }


    if(photo.userId !== sessionUser.id)
    return (
        <div className='photo-page'>
            <div className='photo-container'>
                <img className='img' src={photo.imgURL}></img>
            </div>
            <div className='photo-info'>
                <div className='photo-info-card'>
                    <div className='photo-title-container'>
                        <h1>{photo?.title}</h1>
                    </div>
                    <div>
                        <h3>Photo by: {photo.User?.username}</h3>
                        <p>{photo?.caption}</p>
                    </div>
                </div>
            </div>
            <div className='comment-container'>
                <div>
                    {usersComments?.map((comment)=>(
                        <div class="comments-container">
                            <h3>{comment.User?.username}</h3>
                            <p>{comment.comment}</p>
                            <form onSubmit={handleDeleteComment} hidden={comment.userId !== sessionUser.id}>
                                <button onClick={e=> setCommentToDeleteId(comment.id)}>Delete Comment</button>
                            </form>

                            <button onClick={() => {setShowModal(true)}} hidden={comment.userId !== sessionUser.id}>Edit Comment</button>
                            {showModal && (
                                <Modal>
                                    <form onSubmit={handleEditComment}>
                                        <label>Comment
                                            <textarea className="txt-area" type="textarea" value={editedComment.comment} onChange={(e) =>setEditedComment(e.target.value)}/>
                                        </label>
                                        <button onClick={e=> setCommentUpdateId(comment.id)}>Update Comment</button>
                                    </form>
                                </Modal>
                            )}
                        </div>
                    ))}
                </div>
                <div>
                    <form onSubmit={handleSubmit}>
                        <input placeholder='Add a comment' value={comment} onChange={(e) => setComment(e.target.value)} required></input>
                        <button onClick={handleSubmit}>Post Comment</button>
                    </form>
                </div>
            </div>

        </div>
    )
    else
    return (
        <div className='photo-page'>
            <div className='photo-container'>
                <img className='img' src={photo.imgURL}></img>
            </div>
            <div className='photo-info'>
                <div className='photo-info-card'>
                    <div className='photo-title-container'>
                        <h1>{photo?.title}</h1>
                        <h3>Photo by: {photo.User?.username}</h3>
                        <p>{photo?.caption}</p>
                    </div>
                    <div>
                        <button onClick={directToEditPage}>Edit Photo</button>
                        <button onClick={handleDeletePhoto}>Delete Photo</button>
                    </div>
                </div>
                <div className='comment-container'>
                    <div>
                        {usersComments?.map((comment)=>(
                            <div class="comments-container">
                                <h3>{comment.User?.username}</h3>
                                <p>{comment.comment}</p>
                                <form onSubmit={handleDeleteComment} hidden={comment.userId !== sessionUser.id}>
                                    <button onClick={e=> setCommentToDeleteId(comment.id)}>Delete Comment</button>
                                </form>

                                <button onClick={() => {setShowModal(true)}} hidden={comment.userId !== sessionUser.id}>Edit Comment</button>
                                {showModal && (
                                    <Modal>
                                        <form onSubmit={handleEditComment}>
                                            <label>Comment
                                                <textarea className="txt-area" type="textarea" value={editedComment.comment} onChange={(e) =>setEditedComment(e.target.value)}/>
                                            </label>
                                            <button onClick={e=> setCommentUpdateId(comment.id)}>Update Comment</button>
                                        </form>
                                    </Modal>
                                )}
                            </div>
                        ))}
                    </div>
                    <div>
                        <form onSubmit={handleSubmit}>
                            <input placeholder='Add a comment' value={comment} onChange={(e) => setComment(e.target.value)} required></input>
                            <button onClick={handleSubmit}>Post Comment</button>
                        </form>
                    </div>
                </div>
            </div>

        </div>
    )

}

export default PhotoPage
